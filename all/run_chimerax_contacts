import os
import json
from chimerax.core.commands import run, CmdDesc, register, OpenFolderNameArg, BoolArg

def open_alphafold_models_from_folders(session, directory='.', open_pae=True):
    # Get a list of all subdirectories (folders) in the specified directory
    folders = [folder for folder in os.listdir(directory) if os.path.isdir(os.path.join(directory, folder))]

    if not folders:
        raise ValueError(f"No subfolders found in directory '{directory}'")

    models = []
    for folder in folders:
        folder_path = os.path.join(directory, folder)
        # Find AlphaFold structure files (e.g., .pdb.gz) in each subfolder
        filenames = [filename for filename in os.listdir(folder_path)
                     if filename.endswith('ranked_0.pdb')]

        if not filenames:
            print(f"No AlphaFold model files found in subfolder '{folder}'")
            continue

        # Open each model file found in the subfolder
        for filename in filenames:
            model_path = os.path.join(folder_path, filename)
            result = run(session, f'open {model_path}')

            if isinstance(result, list):
                # Handle the case where multiple models are returned
                for model in result:
                    if hasattr(model, 'id'):
                        model_name = os.path.splitext(filename)[0]
                        run(session, 'light full')
                        run(session, 'view')
                        models.append(model)
                    else:
                        print(f"Model '{filename}' could not be opened properly.")
            else:
                # Handle the case where a single model is returned
                if hasattr(result, 'id'):
                    model = result
                    model_name = os.path.splitext(filename)[0]
                    run(session, 'light full')
                    run(session, 'view')
                    models.append(model)
                else:
                    print(f"Model '{filename}' could not be opened properly.")

    # Open PAE file if requested
    if open_pae:
        open_pae_files_recursive(session, directory)

    return models

def open_pae_files_recursive(session, directory):
    # Recursively find PAE files in the specified directory and its subfolders
    for root, _, files in os.walk(directory):
        structure_count = 1
        for filename in files:
            if filename.startswith ('pae') and filename.endswith('_multimer_v3_pred_0.json'):
                pae_path = os.path.join(root, filename)

                # Extract the model folder path
                model_folder_path = os.path.dirname(pae_path)
                
                # Get the top-ranked model file from ranking_debug.json
                ranking_file_path = os.path.join(root, 'ranking_debug.json')
                if os.path.exists(ranking_file_path):
                    with open(ranking_file_path) as json_file:
                        model_stats = json.load(json_file)
                        model_ranking = model_stats.get('order', [])
                        if model_ranking:
                            top_model_name = model_ranking[0]
                            top_model_filename = f'ranked_0.pdb'
                            top_pae_filename = f"pae_{top_model_name}.json"
                            top_model_path = os.path.join(model_folder_path, top_model_filename)

                            # Open the top-ranked model file
                            top_model_result = run(session, f'open {top_model_path}')
                            structure_id = top_model_result[0] if isinstance(top_model_result, list) else top_model_result

                            # Open the PAE file and associate it with the top-ranked model
                            print(f'open {pae_path} format pae structure #{structure_count}')
                            run(session, f'open {pae_path} format pae structure #{structure_count}')
                            structure_count = structure_count + 1
                else:
                    print(f"No ranking_debug.json file found in '{model_folder_path}'")

def find_structure_id(folder_path, model_number):
    # Function to find and return the structure ID associated with the specified model number
    for filename in os.listdir(folder_path):
        if filename.endswith('ranked_0.pdb'):
            model_path = os.path.join(folder_path, filename)
            result = run(session, f'open {model_path}')
            if isinstance(result, list):
                for model in result:
                    if hasattr(model, 'id') and isinstance(model.id, str) and model.id.endswith(f'_{model_number}'):
                        return model.id
            else:
                if hasattr(result, 'id') and isinstance(result.id, str) and result.id.endswith(f'_{model_number}'):
                    return result.id
    return None

def register_commands(session):
    desc_open = CmdDesc(keyword=[('directory', OpenFolderNameArg)],
                        optional=[('open_pae', BoolArg)],
                        synopsis='Open AlphaFold models from folders within a directory and optionally open PAE files')
    register('openalphafoldfolders', desc_open, open_alphafold_models_from_folders, logger=session.logger)

register_commands(session)

